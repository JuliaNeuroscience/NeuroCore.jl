var documenterSearchIndex = {"docs":
[{"location":"electrophysiology/#Electrophysiology-1","page":"Electrophysiology","title":"Electrophysiology","text":"","category":"section"},{"location":"electrophysiology/#","page":"Electrophysiology","title":"Electrophysiology","text":"NeuroCore.nchannels\nNeuroCore.high_cutoff\nNeuroCore.low_cutoff\nNeuroCore.notch_filter\nNeuroCore.electrode_groups\nNeuroCore.ground_electrode\nNeuroCore.placement_scheme\nNeuroCore.power_line_frequency\nNeuroCore.dewar_position\nNeuroCore.electrical_stimulation\nNeuroCore.electrical_stimulation_parameters\nNeuroCore.epoch_length","category":"page"},{"location":"electrophysiology/#NeuroCore.nchannels","page":"Electrophysiology","title":"NeuroCore.nchannels","text":"nchannels::Int: number of channels present\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.high_cutoff","page":"Electrophysiology","title":"NeuroCore.high_cutoff","text":"Frequencies used for the high-pass filter applied to the channel in Hz.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.low_cutoff","page":"Electrophysiology","title":"NeuroCore.low_cutoff","text":"Frequencies used for the low-pass filter applied to the channel in Hz. If no low-pass filter applied, use n/a. Note that hardware anti-aliasing in A/D conversion of all MEG/EEG electronics applies a low-pass filter; specify its frequency here if applicable.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.notch_filter","page":"Electrophysiology","title":"NeuroCore.notch_filter","text":"Frequencies used for the notch filter applied to the channel, in Hz.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.electrode_groups","page":"Electrophysiology","title":"NeuroCore.electrode_groups","text":"Field to describe the way electrodes are grouped into strips, grids or depth probes e.g., Dict(:grid1 => \"10x8 grid on left temporal pole\", :strip2 => \"1x8 electrode strip on xxx\").\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.ground_electrode","page":"Electrophysiology","title":"NeuroCore.ground_electrode","text":"Description of the location of the ground electrode (\"placed on right mastoid (M2)\").\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.placement_scheme","page":"Electrophysiology","title":"NeuroCore.placement_scheme","text":"Freeform description of the placement of the iEEG electrodes. Left/right/bilateral/depth/surface (e.g., \"left frontal grid and bilateral hippocampal depth\" or \"surface strip and STN depth\" or \"clinical indication bitemporal, bilateral temporal strips and left grid\").\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.power_line_frequency","page":"Electrophysiology","title":"NeuroCore.power_line_frequency","text":"power_line_frequency::F64Hz: Frequency (in Hz) of the power grid at the geographical location of the EEG instrument (i.e., 50 or 60).\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.dewar_position","page":"Electrophysiology","title":"NeuroCore.dewar_position","text":"Position of the dewar during the MEG scan: upright, supine or degrees of angle from vertical: for example on CTF systems, upright=15°, supine = 90°.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.electrical_stimulation","page":"Electrophysiology","title":"NeuroCore.electrical_stimulation","text":"Boolean field to specify if electrical stimulation was done during the recording (options are true or false). Parameters for event-like stimulation should be specified in the _events.tsv file.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.electrical_stimulation_parameters","page":"Electrophysiology","title":"NeuroCore.electrical_stimulation_parameters","text":"Free form description of stimulation parameters, such as frequency, shape etc. Specific onsets can be specified in the _events.tsv file. Specific shapes can be described here in freeform text.\n\n\n\n\n\n\n\n","category":"function"},{"location":"electrophysiology/#NeuroCore.epoch_length","page":"Electrophysiology","title":"NeuroCore.epoch_length","text":"Duration of individual epochs in seconds (e.g., 1) in case of epoched data. If recording was continuous or discontinuous, leave out the field.\n\n\n\n\n\n\n\n","category":"function"},{"location":"units/#Units-1","page":"Units","title":"Units","text":"","category":"section"},{"location":"units/#","page":"Units","title":"Units","text":"Certain properties return measures with a Unitful unit type. These units all have default values but can be changed for a particular value type via method overloading.","category":"page"},{"location":"units/#","page":"Units","title":"Units","text":"NeuroCore.second_type\nNeuroCore.tesla_type\nNeuroCore.degree_type\nNeuroCore.hertz_type\nNeuroCore.ohms_type","category":"page"},{"location":"units/#NeuroCore.second_type","page":"Units","title":"NeuroCore.second_type","text":"second_type(x)\n\nReturns the type used for seconds given x.\n\nExamples\n\njulia> using NeuroCore\n\njulia> second_type(Any)\nUnitful.Quantity{Float64,𝐓,Unitful.FreeUnits{(s,),𝐓,nothing}}\n\n\n\n\n\n","category":"function"},{"location":"units/#NeuroCore.tesla_type","page":"Units","title":"NeuroCore.tesla_type","text":"tesla_type(x)\n\nReturns the type used for tesla given x.\n\nExamples\n\njulia> using NeuroCore\n\njulia> tesla_type(Any)\nUnitful.Quantity{Float64,𝐌*𝐈^-1*𝐓^-2,Unitful.FreeUnits{(T,),𝐌*𝐈^-1*𝐓^-2,nothing}}\n\n\n\n\n\n","category":"function"},{"location":"units/#NeuroCore.degree_type","page":"Units","title":"NeuroCore.degree_type","text":"degree_type(x)\n\nReturns the type used for hertz given x.\n\nExamples\n\njulia> using NeuroCore\n\njulia> degree_type(Any)\nUnitful.Quantity{Int64,NoDims,Unitful.FreeUnits{(°,),NoDims,nothing}}\n\n\n\n\n\n","category":"function"},{"location":"units/#NeuroCore.hertz_type","page":"Units","title":"NeuroCore.hertz_type","text":"hertz_type(x)\n\nReturns the type used for hertz given x.\n\nExamples\n\njulia> using NeuroCore\n\njulia> hertz_type(Any)\nUnitful.Quantity{Float64,𝐓^-1,Unitful.FreeUnits{(Hz,),𝐓^-1,nothing}}\n\n\n\n\n\n","category":"function"},{"location":"units/#NeuroCore.ohms_type","page":"Units","title":"NeuroCore.ohms_type","text":"ohms_type(x)\n\nReturns the type used for ohms given x.\n\nExamples\n\njulia> using NeuroCore\n\njulia> ohms_type(Any)\nUnitful.Quantity{Float64,𝐋^2*𝐌*𝐈^-2*𝐓^-3,Unitful.FreeUnits{(kΩ,),𝐋^2*𝐌*𝐈^-2*𝐓^-3,nothing}}\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#Orientation-and-Dimension-Names-1","page":"Orientation and Dimensions","title":"Orientation and Dimension Names","text":"","category":"section"},{"location":"dimensions/#","page":"Orientation and Dimensions","title":"Orientation and Dimensions","text":"NeuroCore places a strong emphasis on arrays with named dimensions. This allows the use of well established interfaces for arrays across the julia ecosystem while still providing meaningful information that may be specific to the type of data being worked with.","category":"page"},{"location":"dimensions/#","page":"Orientation and Dimensions","title":"Orientation and Dimensions","text":"NeuroCore.sagittaldim\nNeuroCore.coronaldim\nNeuroCore.axialdim\nNeuroCore.indices_sagittal\nNeuroCore.indices_axial\nNeuroCore.indices_coronal\nNeuroCore.indices_unit\nNeuroCore.onset\nNeuroCore.stop_time\nNeuroCore.duration\nNeuroCore.time_continuity\nNeuroCore.sampling_rate\nNeuroCore.spatial_offset\nNeuroCore.spatial_units\nNeuroCore.is_radiologic\nNeuroCore.is_neurologic","category":"page"},{"location":"dimensions/#NeuroCore.sagittaldim","page":"Orientation and Dimensions","title":"NeuroCore.sagittaldim","text":"sagittaldim(x) -> Int\n\nReturn the dimension of the array used for sagittal time.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.coronaldim","page":"Orientation and Dimensions","title":"NeuroCore.coronaldim","text":"coronaldim(x) -> Int\n\nReturn the dimension of the array used for coronal time.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.axialdim","page":"Orientation and Dimensions","title":"NeuroCore.axialdim","text":"axialdim(x) -> Int\n\nReturn the dimension of the array used for axial time.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.indices_sagittal","page":"Orientation and Dimensions","title":"NeuroCore.indices_sagittal","text":"indices_sagittal(x)\n\nReturn the indices of the sagittal dimension.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.indices_axial","page":"Orientation and Dimensions","title":"NeuroCore.indices_axial","text":"indices_axial(x)\n\nReturn the indices of the axial dimension.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.indices_coronal","page":"Orientation and Dimensions","title":"NeuroCore.indices_coronal","text":"indices_coronal(x)\n\nReturn the indices of the coronal dimension.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.onset","page":"Orientation and Dimensions","title":"NeuroCore.onset","text":"onset(x)\nonset!(x, val)\n\nFirst time point along the time axis.\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.stop_time","page":"Orientation and Dimensions","title":"NeuroCore.stop_time","text":"Last time point along the time axis.\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.duration","page":"Orientation and Dimensions","title":"NeuroCore.duration","text":"Duration of the event along the time axis.\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.time_continuity","page":"Orientation and Dimensions","title":"NeuroCore.time_continuity","text":"time_continuity(x)\ntime_continuity!(x, val)\n\nDefines whether the recording is \"continuous\", \"discontinuous\" or \"epoched\"; this latter limited to time windows about events of interest (e.g., stimulus presentations, subject responses etc.)\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.sampling_rate","page":"Orientation and Dimensions","title":"NeuroCore.sampling_rate","text":"sampling_rate(x)\nsampling_rate!(x, val)\n\nNumber of samples per second.\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.spatial_offset","page":"Orientation and Dimensions","title":"NeuroCore.spatial_offset","text":"spatial_offset(x)\nspatial_offset!(x, val)\n\nThe offset of each dimension (i.e., where each spatial axis starts).\n\n\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.spatial_units","page":"Orientation and Dimensions","title":"NeuroCore.spatial_units","text":"spatial_units(x)\n\nReturns the units (i.e. Unitful.unit) that each spatial axis is measured in. If not available nothing is returned for each spatial axis.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.is_radiologic","page":"Orientation and Dimensions","title":"NeuroCore.is_radiologic","text":"is_radiologic(x) -> Bool\n\nTest to see if x is in radiological orientation.\n\n\n\n\n\n","category":"function"},{"location":"dimensions/#NeuroCore.is_neurologic","page":"Orientation and Dimensions","title":"NeuroCore.is_neurologic","text":"is_neurologic(x) -> Bool\n\nTest to see if x is in neurological orientation.\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Imaging-Metadata-1","page":"Imaging","title":"Imaging Metadata","text":"","category":"section"},{"location":"imaging_metadata/#Sequence-Metadata-1","page":"Imaging","title":"Sequence Metadata","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.SequenceMetadata","category":"page"},{"location":"imaging_metadata/#NeuroCore.SequenceMetadata","page":"Imaging","title":"NeuroCore.SequenceMetadata","text":"SequenceMetadata\n\nMetadata structure for general MRI sequence information.\n\nSupported Properties\n\nnonlinear_gradient_correction: Returns Bool stating if the image saved has been corrected for gradient nonlinearities by the scanner sequence. Default is false.\npulse_sequence: General description of the pulse sequence used for the scan (i.e. MPRAGE, Gradient Echo EPI, Spin Echo EPI, Multiband gradient echo EPI).\npulse_sequence_details: Information beyond pulse sequence type that identifies the specific pulse sequence used (i.e. \"Standard Siemens Sequence distributed with the VB17 software,\" \"Siemens WIP ### version #.##,\" or \"Sequence written by X using a version compiled on MM/DD/YYYY\").\npulse_sequence_type: A general description of the pulse sequence used for the scan (i.e. MPRAGE, Gradient Echo EPI, Spin Echo EPI, Multiband gradient echo EPI).\nscanning_sequence: Description of the type of sequence data acquired.\nsequence_name: Manufacturer’s designation of the sequence name.\nsequence_varient: Variant of the scanning_sequence property.\n\n\n\n\n\n","category":"type"},{"location":"imaging_metadata/#Properties-1","page":"Imaging","title":"Properties","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.nonlinear_gradient_correction\nNeuroCore.pulse_sequence\nNeuroCore.pulse_sequence_details\nNeuroCore.pulse_sequence_type\nNeuroCore.scanning_sequence\nNeuroCore.sequence_name\nNeuroCore.sequence_varient","category":"page"},{"location":"imaging_metadata/#NeuroCore.nonlinear_gradient_correction","page":"Imaging","title":"NeuroCore.nonlinear_gradient_correction","text":"Returns Bool stating if the image saved has been corrected for gradient nonlinearities by the scanner sequence. Default is false.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.pulse_sequence","page":"Imaging","title":"NeuroCore.pulse_sequence","text":"General description of the pulse sequence used for the scan (i.e. MPRAGE, Gradient Echo EPI, Spin Echo EPI, Multiband gradient echo EPI).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.pulse_sequence_details","page":"Imaging","title":"NeuroCore.pulse_sequence_details","text":"Information beyond pulse sequence type that identifies the specific pulse sequence used (i.e. \"Standard Siemens Sequence distributed with the VB17 software,\" \"Siemens WIP ### version #.##,\" or \"Sequence written by X using a version compiled on MM/DD/YYYY\").\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.pulse_sequence_type","page":"Imaging","title":"NeuroCore.pulse_sequence_type","text":"A general description of the pulse sequence used for the scan (i.e. MPRAGE, Gradient Echo EPI, Spin Echo EPI, Multiband gradient echo EPI).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.scanning_sequence","page":"Imaging","title":"NeuroCore.scanning_sequence","text":"Description of the type of sequence data acquired.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.sequence_name","page":"Imaging","title":"NeuroCore.sequence_name","text":"Manufacturer’s designation of the sequence name.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.sequence_varient","page":"Imaging","title":"NeuroCore.sequence_varient","text":"Variant of the scanning_sequence property.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Encoding-Direction-1","page":"Imaging","title":"Encoding Direction","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.EncodingDirectionMetadata","category":"page"},{"location":"imaging_metadata/#NeuroCore.EncodingDirectionMetadata","page":"Imaging","title":"NeuroCore.EncodingDirectionMetadata","text":"EncodingDirectionMetadata\n\nMetadata structure for general MRI sequence information.\n\nSupported Properties\n\nfreqdim: Which spatial dimension (1, 2, or 3) corresponds to phase acquisition.\nphasedim: Which spatial dimension (1, 2, or 3) corresponds to phase acquisition.\nslicedim: Which dimension slices where acquired at throughout MRI acquisition.\nslice_start: Which slice corresponds to the first slice acquired during MRI acquisition (i.e. not padded slices).\nslice_end: Which slice corresponds to the last slice acquired during MRI acquisition (i.e. not padded slices).\nslice_duration: Time to acquire one slice\nslice_encoding_direction: Values ending in \"neg\" indicate that the contents of slicetiming are defined in reverse order (the first entry corresponds to the slice with the largest index, and the final entry corresponds to slice index zero. When present, the axis defined by slice*encodingneeds to be consistent with theslicedim field in the NIfTI header. When absent, the entries in slice_timing must be in the order of increasing slice index as defined by the NIfTI header.\nphase_encoding_direction: The phase encoding direction is defined as the direction along which phase was modulated which may result in visible distortions. Note that this is not the same as the DICOM term \"inplanephaseencodingdirection\" which can have \"ROW\" or \"COL\" values. This parameter is REQUIRED if corresponding fieldmap data is present or when using multiple runs with different phase encoding directions (which can be later used for field inhomogeneity correction).\n\nExamples\n\njulia> using NeuroCore\n\njulia> m = EncodingDirectionMetadata(1, 2, 3, 4, 5, 6)\nEncodingDirectionMetadata(1, 2, 3, 4, 5, 6.0)\n\njulia> m.slice_encoding_direction\nkpos::EncodingDirection = 3\n\njulia> m.slice_encoding_direction == slice_encoding_direction(m)\ntrue\n\njulia> m.phase_encoding_direction\njpos::EncodingDirection = 2\n\njulia> m.phase_encoding_direction == phase_encoding_direction(m)\ntrue\n\njulia> m.freqdim\n1\n\njulia> m.freqdim == freqdim(m)\ntrue\n\njulia> m.phasedim\n2\n\njulia> m.phasedim == phasedim(m)\ntrue\n\njulia> m.slicedim\n3\n\njulia> m.slicedim == slicedim(m)\ntrue\n\njulia> m.slice_start\n4\n\njulia> m.slice_start == slice_start(m)\ntrue\n\njulia> m.slice_end\n5\n\njulia> m.slice_end == slice_end(m)\ntrue\n\njulia> m.slice_duration\n6.0\n\njulia> m.slice_duration == slice_duration(m)\ntrue\n\n\n\n\n\n","category":"type"},{"location":"imaging_metadata/#Properties-2","page":"Imaging","title":"Properties","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.EncodingDirection\nNeuroCore.phase_encoding_direction\nNeuroCore.slice_encoding_direction\nNeuroCore.freqdim\nNeuroCore.phasedim\nNeuroCore.slicedim\nNeuroCore.slice_start\nNeuroCore.slice_end\nNeuroCore.slice_duration","category":"page"},{"location":"imaging_metadata/#NeuroCore.EncodingDirection","page":"Imaging","title":"NeuroCore.EncodingDirection","text":"EncodingDirection\n\nPossible values: ipos, jpos, kpos, ineg,jneg,kneg(the axis of the NIfTI data along which slices were acquired, and the direction in which SliceTiming is defined with respect to).ipos,jpos,kposidentifiers correspond to the first, second and third axis of the data in the NIfTI file.*neg` indicates that the contents of SliceTiming are defined in reverse order - that is, the first entry corresponds to the slice with the largest index, and the final entry corresponds to slice index zero. \n\n\n\n\n\n","category":"type"},{"location":"imaging_metadata/#NeuroCore.phase_encoding_direction","page":"Imaging","title":"NeuroCore.phase_encoding_direction","text":"phase_encoding_direction(x) -> EncodingDirection\n\nThe phase encoding direction is defined as the direction along which phase was modulated which may result in visible distortions. Note that this is not the same as the DICOM term \"inplanephaseencodingdirection\" which can have \"ROW\" or \"COL\" values. This parameter is REQUIRED if corresponding fieldmap data is present or when using multiple runs with different phase encoding directions (which can be later used for field inhomogeneity correction).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slice_encoding_direction","page":"Imaging","title":"NeuroCore.slice_encoding_direction","text":"slice_encoding_direction(x) -> EncodingDirection\n\nValues ending in \"*neg\" indicate that the contents of slicetiming are defined in reverse order (the first entry corresponds to the slice with the largest index, and the final entry corresponds to slice index zero. When present, the axis defined by `sliceencodingneeds to be consistent with theslicedim` field in the NIfTI header. When absent, the entries in slice_timing must be in the order of increasing slice index as defined by the NIfTI header.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.freqdim","page":"Imaging","title":"NeuroCore.freqdim","text":"Which spatial dimension (1, 2, or 3) corresponds to phase acquisition.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.phasedim","page":"Imaging","title":"NeuroCore.phasedim","text":"Which spatial dimension (1, 2, or 3) corresponds to phase acquisition.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slicedim","page":"Imaging","title":"NeuroCore.slicedim","text":"Which dimension slices where acquired at throughout MRI acquisition.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slice_start","page":"Imaging","title":"NeuroCore.slice_start","text":"Which slice corresponds to the first slice acquired during MRI acquisition (i.e. not padded slices).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slice_end","page":"Imaging","title":"NeuroCore.slice_end","text":"Which slice corresponds to the last slice acquired during MRI acquisition (i.e. not padded slices).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slice_duration","page":"Imaging","title":"NeuroCore.slice_duration","text":"Time to acquire one slice\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Spatial-Encoding-1","page":"Imaging","title":"Spatial Encoding","text":"","category":"section"},{"location":"imaging_metadata/#Properties-3","page":"Imaging","title":"Properties","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.nshots\nNeuroCore.effective_echo_spacing\nNeuroCore.parallel_acquisition_technique\nNeuroCore.parallel_reduction_factor_in_plane\nNeuroCore.partial_fourier\nNeuroCore.partial_fourier_direction\nNeuroCore.total_readout_time","category":"page"},{"location":"imaging_metadata/#NeuroCore.nshots","page":"Imaging","title":"NeuroCore.nshots","text":"The number of RF excitations needed to reconstruct a slice or volume. Please mind that this is not the same as Echo Train Length which denotes the number of lines of k-space collected after an excitation.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.effective_echo_spacing","page":"Imaging","title":"NeuroCore.effective_echo_spacing","text":"The \"effective\" sampling interval, specified in seconds, between lines in the phase-encoding direction, defined based on the size of the reconstructed image in the phase direction. It is frequently, but incorrectly, referred to as \"dwell time\" (see dwell_time parameter below for actual dwell time). It is required for unwarping distortions using field maps. Note that beyond just in-plane acceleration, a variety of other manipulations to the phase encoding need to be accounted for properly, including partial fourier, phase oversampling, phase resolution, phase field-of-view and interpolation.<sup>2</sup> This parameter is REQUIRED if corresponding fieldmap data is present.\n\n<sup>2</sup>Conveniently, for Siemens’ data, this value is easily obtained as 1/[BWPPPE * ReconMatrixPE], where BWPPPE is the \"BandwidthPerPixelPhaseEncode in DICOM tag (0019,1028) and ReconMatrixPE is the size of the actual reconstructed data in the phase direction (which is NOT reflected in a single DICOM tag for all possible aforementioned scan manipulations). See here and here\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.parallel_acquisition_technique","page":"Imaging","title":"NeuroCore.parallel_acquisition_technique","text":"The type of parallel imaging used (e.g. GRAPPA, SENSE).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.parallel_reduction_factor_in_plane","page":"Imaging","title":"NeuroCore.parallel_reduction_factor_in_plane","text":"The parallel imaging (e.g, GRAPPA) factor. Use the denominator of the fraction of k-space encoded for each slice. For example, 2 means half of k-space is encoded.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.partial_fourier","page":"Imaging","title":"NeuroCore.partial_fourier","text":"The fraction of partial Fourier information collected.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.partial_fourier_direction","page":"Imaging","title":"NeuroCore.partial_fourier_direction","text":"The direction where only partial Fourier information was collected.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.total_readout_time","page":"Imaging","title":"NeuroCore.total_readout_time","text":"The total readout time. This is actually the \"effective\" total readout time , defined as the readout duration, specified in seconds, that would have generated data with the given level of distortion. It is NOT the actual, physical duration of the readout train. If effective_echo_spacing has been properly computed, it is just effective_echo_spacing * (ReconMatrixPE - 1).<sup>3</sup> .\n\nThis parameter is\n\nREQUIRED if corresponding \"field/distortion\" maps acquired with opposing phase encoding directions are present.\n\n<sup>3</sup>We use the \"FSL definition\", i.e, the time between the center of the first \"effective\" echo and the center of the last \"effective\" echo.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Magentization-Transfer-1","page":"Imaging","title":"Magentization Transfer","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.MagnetizationTransferMetadata","category":"page"},{"location":"imaging_metadata/#NeuroCore.MagnetizationTransferMetadata","page":"Imaging","title":"NeuroCore.MagnetizationTransferMetadata","text":"MagnetizationTransferMetadata\n\nMetadata structure for information concerning MRI magnetization transfer pulse.\n\nSupported Properties\n\nmt_state: Specifies whether the magnetization transfer pulse is applied. This parameter is REQUIRED by all the anatomical images grouped by MTR, MTS and MPM suffixes.\nmt_offset_frequency: The frequency offset of the magnetization transfer pulse with respect to the central H1 Larmor frequency in Hertz (Hz).\nmt_pulse_bandwidth: The excitation bandwidth of the magnetization transfer pulse in Hertz (Hz).\nmt_npulses: Number of magnetization transfer RF pulses applied before the readout.\nmt_pulse_shape: Shape of the magnetization transfer RF pulse waveform. Accepted values:\nmt_pulse_duration: Duration of the magnetization transfer RF pulse in seconds.\n\n\n\n\n\n","category":"type"},{"location":"imaging_metadata/#Properties-4","page":"Imaging","title":"Properties","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.mt_state\nNeuroCore.mt_offset_frequency\nNeuroCore.mt_pulse_bandwidth\nNeuroCore.mt_npulses\nNeuroCore.mt_pulse_shape\nNeuroCore.mt_pulse_duration","category":"page"},{"location":"imaging_metadata/#NeuroCore.mt_state","page":"Imaging","title":"NeuroCore.mt_state","text":"mt_state(x) -> Bool\nmt_state!(x, val)\n\nSpecifies whether the magnetization transfer pulse is applied. This parameter is REQUIRED by all the anatomical images grouped by MTR, MTS and MPM suffixes.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.mt_offset_frequency","page":"Imaging","title":"NeuroCore.mt_offset_frequency","text":"mt_offset_frequency(x)\nmt_offset_frequency!(x, val)\n\nThe frequency offset of the magnetization transfer pulse with respect to the central H1 Larmor frequency in Hertz (Hz).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.mt_pulse_bandwidth","page":"Imaging","title":"NeuroCore.mt_pulse_bandwidth","text":"mt_pulse_bandwidth(x)\nmt_pulse_bandwidth!(x, val)\n\nThe excitation bandwidth of the magnetization transfer pulse in Hertz (Hz).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.mt_npulses","page":"Imaging","title":"NeuroCore.mt_npulses","text":"mt_npulses(x)\nmt_npulses!(x, val)\n\nNumber of magnetization transfer RF pulses applied before the readout.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.mt_pulse_shape","page":"Imaging","title":"NeuroCore.mt_pulse_shape","text":"mt_pulse_shape(x)\nmt_pulse_shape!(x, val)\n\nShape of the magnetization transfer RF pulse waveform. Accepted values:\n\nHARD\nGAUSSIAN\nGAUSSHANN (gaussian pulse with Hanning window)\nSINC\nSINCHANN (sinc pulse with Hanning window)\nSINCGAUSS (sinc pulse with Gaussian window)\nFERMI\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.mt_pulse_duration","page":"Imaging","title":"NeuroCore.mt_pulse_duration","text":"mt_pulse_duration(x)\nmt_pulse_duration!(x, val)\n\nDuration of the magnetization transfer RF pulse in seconds.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Spoiling-1","page":"Imaging","title":"Spoiling","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.SpoilingMetadata","category":"page"},{"location":"imaging_metadata/#NeuroCore.SpoilingMetadata","page":"Imaging","title":"NeuroCore.SpoilingMetadata","text":"SpoilingMetadata\n\nMetadata structure for information concerning MRI sequence spoiling.\n\nSupported Properties\n\nspoiling_state: Specifies whether the pulse sequence uses any type of spoiling stratey to suppress transverse magnetization remaining after the readout.\nspoiling_type: Specifies which spoiling method(s) are used by a spoiled sequence. Accepted values: RF, GRADIENT or COMBINED.\nspoiling_gradient_moment: Zeroth moment of the spoiler gradient lobe in militesla times second per meter (mT.s/m).\nspoiling_gradient_duration: The duration of the spoiler gradient lobe in seconds. The duration of a trapezoidal lobe is defined as the summation of ramp-up and plateu times.\n\n\n\n\n\n","category":"type"},{"location":"imaging_metadata/#Properties-5","page":"Imaging","title":"Properties","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.spoiling_state\nNeuroCore.spoiling_type\nNeuroCore.spoiling_gradient_moment\nNeuroCore.spoiling_gradient_duration","category":"page"},{"location":"imaging_metadata/#NeuroCore.spoiling_state","page":"Imaging","title":"NeuroCore.spoiling_state","text":"Specifies whether the pulse sequence uses any type of spoiling stratey to suppress transverse magnetization remaining after the readout.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.spoiling_type","page":"Imaging","title":"NeuroCore.spoiling_type","text":"Specifies which spoiling method(s) are used by a spoiled sequence. Accepted values: RF, GRADIENT or COMBINED.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.spoiling_gradient_moment","page":"Imaging","title":"NeuroCore.spoiling_gradient_moment","text":"Zeroth moment of the spoiler gradient lobe in militesla times second per meter (mT.s/m).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.spoiling_gradient_duration","page":"Imaging","title":"NeuroCore.spoiling_gradient_duration","text":"The duration of the spoiler gradient lobe in seconds. The duration of a trapezoidal lobe is defined as the summation of ramp-up and plateu times.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#Time-1","page":"Imaging","title":"Time","text":"","category":"section"},{"location":"imaging_metadata/#","page":"Imaging","title":"Imaging","text":"NeuroCore.echo_time\nNeuroCore.inversion_time\nNeuroCore.slice_timing\nNeuroCore.dwell_time\nNeuroCore.delay_time\nNeuroCore.acquisition_duration\nNeuroCore.volume_timing\nNeuroCore.repetition_time","category":"page"},{"location":"imaging_metadata/#NeuroCore.echo_time","page":"Imaging","title":"NeuroCore.echo_time","text":"The echo time (TE) for the acquisition. This parameter is REQUIRED if corresponding fieldmap data is present or the data comes from a multi echo sequence.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.inversion_time","page":"Imaging","title":"NeuroCore.inversion_time","text":"Returns the inversion time (TI) for the acquisition, specified in seconds. Inversion time is the time after the middle of inverting RF pulse to middle of excitation pulse to detect the amount of longitudinal magnetization.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.slice_timing","page":"Imaging","title":"NeuroCore.slice_timing","text":"The time at which each slice was acquired within each volume (frame) of the acquisition. Slice timing is not slice order – rather, it is a list of times (in JSON format) containing the time (in seconds) of each slice acquisition in relation to the beginning of volume acquisition. The list goes through the slices along the slice axis in the slice encoding dimension (see below). Note that to ensure the proper interpretation of the slice_timing field, it is important to check if the OPTIONAL slice_encoding_direction exists. In particular, if slice_encoding_direction is negative, the entries in slice_timing are defined in reverse order with respect to the slice axis (i.e., the final entry in the slice_timing list is the time of acquisition of slice 0). This parameter is REQUIRED for sparse sequences that do not have the delay_time field set. In addition without this parameter slice time correction will not be possible.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.dwell_time","page":"Imaging","title":"NeuroCore.dwell_time","text":"Actual dwell time (in seconds) of the receiver per point in the readout direction, including any oversampling. For Siemens, this corresponds to DICOM field (0019,1018) (in ns). This value is necessary for the optional readout distortion correction of anatomicals in the HCP Pipelines. It also usefully provides a handle on the readout bandwidth, which isn’t captured in the other metadata tags. Not to be confused with effective_echo_spacing, and the frequent mislabeling of echo spacing (which is spacing in the phase encoding direction) as \"dwell time\" (which is spacing in the readout direction).\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.delay_time","page":"Imaging","title":"NeuroCore.delay_time","text":"Returns the user specified time (in seconds) to delay the acquisition of data for the following volume. If the field is not present it is assumed to be set to zero. Corresponds to Siemens CSA header field ldelaytimeInTR. This field is REQUIRED for sparse sequences using the `repetitiontimefield that do not have the slice_timing field set to allowed for accurate calculation of \"acquisition time\". This field is mutually exclusive withvolume_timing`.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.acquisition_duration","page":"Imaging","title":"NeuroCore.acquisition_duration","text":"Duration (in seconds) of volume acquisition. This field is REQUIRED for sequences that are described with the volume_timingfield and that do not have the slice_timing field set to allowed for accurate calculation of \"acquisition time\". This field is mutually exclusive with repetition_time.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.volume_timing","page":"Imaging","title":"NeuroCore.volume_timing","text":"Returns the time at which each volume was acquired during the acquisition. It is described using a list of times (in JSON format) referring to the onset of each volume in the BOLD series. The list must have the same length as the BOLD series, and the values must be non-negative and monotonically increasing. This field is mutually exclusive with repetitiontime and delaytime. If defined, this requires acquisition time (TA) be defined via either slicetiming or acquisitionduration be defined.\n\n\n\n\n\n\n\n","category":"function"},{"location":"imaging_metadata/#NeuroCore.repetition_time","page":"Imaging","title":"NeuroCore.repetition_time","text":"Returns the time in seconds between the beginning of an acquisition of one volume and the beginning of acquisition of the volume following it (TR). Please note that this definition includes time between scans (when no data has been acquired) in case of sparse acquisition schemes. This value needs to be consistent with the pixdim[4] field (after accounting for units stored in xyztunits field) in the NIfTI header. This field is mutually exclusive with `volumetiming` and is derived from DICOM Tag 0018, 0080 and converted to seconds.\n\n\n\n\n\n\n\n","category":"function"},{"location":"#NeuroCore.jl-1","page":"Introduction","title":"NeuroCore.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"NeuroCore ties together various packages throughout the Julia ecosystem and provides a set of common properties for developing tools related to computational neuroscience. It's aimed at easing the development of neuroscience related software that is compatible across a wide range of disciplines.","category":"page"},{"location":"semantic_positions/#Semantic-Positions-1","page":"Semantic Positions","title":"Semantic Positions","text":"","category":"section"},{"location":"semantic_positions/#","page":"Semantic Positions","title":"Semantic Positions","text":"Modules = [NeuroCore.SemanticPositions]\nOrder   = [:function, :type]","category":"page"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_anterior-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_anterior","text":"is_anterior(x) -> Bool\n\nReturns true if x represent the anterior position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_axial-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_axial","text":"is_axial(x) -> Bool\n\nReturns true if x represent the axial orientation.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_coronal-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_coronal","text":"is_coronal(x) -> Bool\n\nReturns true if x represent the coronal orientation.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_cortical-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_cortical","text":"is_cortical(::T) -> Bool\n\nReturns true if T represents a cortical region.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_csp-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_csp","text":"is_csp(::T) -> Bool\n\nReturns true if T represents a region of corticospinal fluid (CSP).\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_gyrus-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_gyrus","text":"is_gyrus(::T) -> Bool\n\nReturns true if T represents a gyrus.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_inferior-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_inferior","text":"is_inferior(x) -> Bool\n\nReturns true if x represent the inferior position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_left-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_left","text":"is_left(x) -> Bool\n\nReturns true if x represent the left position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_posterior-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_posterior","text":"is_posterior(x) -> Bool\n\nReturns true if x represent the posterior position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_right-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_right","text":"is_right(x) -> Bool\n\nReturns true if x represent the right position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_sagittal-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_sagittal","text":"is_sagittal(x) -> Bool\n\nReturns true if x represent the sagittal orientation.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_sulcus-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_sulcus","text":"is_sulcus(::T) -> Bool\n\nReturns true if T represents a gyrus.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_superior-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_superior","text":"is_superior(x) -> Bool\n\nReturns true if x represent the superior position.\n\n\n\n\n\n","category":"method"},{"location":"semantic_positions/#NeuroCore.SemanticPositions.is_white_matter-Tuple{Symbol}","page":"Semantic Positions","title":"NeuroCore.SemanticPositions.is_white_matter","text":"is_white_matter(::T) -> Bool\n\nReturns true if T represents white matter.\n\n\n\n\n\n","category":"method"},{"location":"types/#NeuroCore-Types-1","page":"Types","title":"NeuroCore Types","text":"","category":"section"},{"location":"types/#The-NeuroArray-1","page":"Types","title":"The NeuroArray","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Julia benefits enormously from having a common interface to customizable arrays and using the AbstractArray interface instantly allows us access to cutting edge algorithms that would otherwise take months to years to make compatible with neuroscience specific formats. NeuroCore takes ownership over arrays from existing packages (e.g., ImageMeta from ImageMetadata) by including a custom metadata field. In so doing we inherit well maintained array structures and can create unique methods when necessary.","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"The Orientation and Dimension Names section covers unique methods made available through this package for dimensions. The remaining documentation is mostly dedicated to accessing and composing various forms of metadata.","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"NeuroCore.NeuroArray","category":"page"},{"location":"types/#NeuroCore.NeuroArray","page":"Types","title":"NeuroCore.NeuroArray","text":"NeuroArray(array; axes...[, metadata])\n\nExamples\n\njulia> using NeuroCore\n\njulia> x = NeuroArray(rand(2,3,4,10);\n               left = 1:2,\n               anterior = 1:3,\n               superior=1:4,\n               time = range(1, stop=10, length=10));\n\njulia> dimnames(x)\n(:left, :anterior, :superior, :time)\n\njulia> is_radiologic(x)\ntrue\n\njulia> is_neurologic(x)\nfalse\n\njulia> dim(x, :left) == sagittaldim(x) == 1\ntrue\n\njulia> coronaldim(x)\n2\n\njulia> axialdim(x)\n3\n\njulia> indices_sagittal(x)\n1:2\n\njulia> indices_coronal(x)\n1:3\n\njulia> indices_axial(x)\n1:4\n\njulia> sampling_rate(x)\n1.0\n\njulia> duration(x)\n9.0\n\njulia> stop_time(x)\n10.0\n\n\n\n\n\n","category":"type"},{"location":"types/#Coordinates-1","page":"Types","title":"Coordinates","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Sets of coordinates may be created using a vector of tuples through the NeuroCoordinates type. This offers the same functionality as a NeuroArray for storing unique metadata.","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"NeuroCore.NeuroCoordinates","category":"page"},{"location":"types/#NeuroCore.NeuroCoordinates","page":"Types","title":"NeuroCore.NeuroCoordinates","text":"NeuroCoordinates\n\nExamples\n\njulia> using NeuroCore\n\njulia> x = NeuroCoordinates([(1,1,1), (1,1,2)], [:roi1, :roi2]);\n\n\n\n\n\n","category":"type"}]
}
